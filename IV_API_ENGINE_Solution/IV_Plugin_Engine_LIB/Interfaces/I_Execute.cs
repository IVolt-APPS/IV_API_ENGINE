namespace IVolt.Apps.PluginEngine.Interfaces
{
	////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	///   Basic execution interface for plugin-based systems supporting parameterized, dynamic, and
	///   version-based execution.
	/// </summary>
	///
	/// <remarks>	Markalicz, 4/16/2025. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////
	public interface I_Execute
	{

		/////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Executes the default plugin behavior. </summary>
		///
		/// <returns>	An object. </returns>
		/////////////////////////////////////////////////////////////////////////////////////////////
		void SimpleExecute();
		/////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Executes the default plugin behavior. </summary>
		///
		/// <returns>	An object. </returns>
		/////////////////////////////////////////////////////////////////////////////////////////////
		object Execute();
		/////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Executes the default plugin behavior. </summary>
		///
		/// <param name="ExecuteOn"> 	The execute on Date/Time. </param>
		/// <param name="PArameters">	The arameters. </param>
		///
		/// <returns>	An object. </returns>
		/////////////////////////////////////////////////////////////////////////////////////////////
		object Execute(DateTime ExecuteOn, List<object> PArameters);
		/////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Executes the default plugin behavior. </summary>
		///
		/// <param name="ExecutionCount">	Number of executions. </param>
		/// <param name="PArameters">			The arameters. </param>
		///
		/// <returns>	An object. </returns>
		/////////////////////////////////////////////////////////////////////////////////////////////
		object Execute(int ExecutionCount, List<object> PArameters);
		/////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Executes with a required primary parameter. </summary>
		///
		/// <param name="Parameter">	The parameter. </param>
		///
		/// <returns>	An object. </returns>
		/////////////////////////////////////////////////////////////////////////////////////////////
		object Execute(object Parameter);
		/////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Executes with optional runtime parameters. </summary>
		///
		/// <param name="parameters">	Options for controlling the operation. </param>
		///
		/// <returns>	An object. </returns>
		/////////////////////////////////////////////////////////////////////////////////////////////
		object Execute(object[] parameters);
		/////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Executes with both a required parameter and additional arguments. </summary>
		///
		/// <param name="Parameter"> 	The parameter. </param>
		/// <param name="parameters">	Options for controlling the operation. </param>
		///
		/// <returns>	An object. </returns>
		/////////////////////////////////////////////////////////////////////////////////////////////
		object Execute(object Parameter, object[] parameters);
		/////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Executes a dynamic C# code snippet after replacement. </summary>
		///
		/// <param name="code">				 	The code. </param>
		/// <param name="replacementFunc">	The replacement function. </param>
		///
		/// <returns>	An object. </returns>
		/////////////////////////////////////////////////////////////////////////////////////////////
		object ExecuteDynamic(string code, Func<string, string> replacementFunc);
		/////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Executes a specific plugin version by identifier with optional parameters. </summary>
		///
		/// <param name="pluginId">  	Identifier for the plugin. </param>
		/// <param name="version">	  	The version. </param>
		/// <param name="Parameter"> 	(Optional) The parameter. </param>
		/// <param name="parameters">	(Optional) Options for controlling the operation. </param>
		///
		/// <returns>	An object. </returns>
		/////////////////////////////////////////////////////////////////////////////////////////////
		object ExecutePlugin(string pluginId, int version, object Parameter = null, object[] parameters = null);
	}

}
